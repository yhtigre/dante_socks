#
# sockdのログ出力先を指定。
#
logoutput: stdout /var/log/sockd.log

#
# デバッグモード。
#
#debug: 1 

internal.protocol: ipv4        # インバウンド通信をIPv4のみとする。
internal: eth0 port = 11080    # インバウンド通信のポートを指定。

external.protocol: ipv4        # アウトバウンド通信をIPv4のみとする。
external: eth0                 # アウトバウンド通信のポートを指定。


#
# sockdがサーバとして動作する場合の認証方式。
# 本例では「ユーザ/パスワード」認証方式を指定(RFC931は古いIDENT認証方式である)。
#
socksmethod: username #rfc931

#
# sockdがクライアントとして動作する場合の認証方式。
# 本例では認証を行わない。
#
# クライアントとして動作するケースとして上位のSOCKSサーバへ転送する
# 場合が挙げられる。この状態で更なる認証を設定する事が可能であるが
# 本例では認証を行わない
#
clientmethod: none


#
# 本例ではroot権限で動作させている。
# sockdの実効権限はsockdアカウント等の一般権限を推奨している。
# 原則論としては上述した推奨事項に沿うべきだと思われるが、
#
# 1) パッケージ導入時に一般的によく見られる専用アカウントの作成がなかった。
# 2) 出力先ログファイルには一般論としてrootの書込み権限を必要とする。
# 3) インバウンドポートに特権ポートを利用するかも知れない。
#
# といった理由でrootにしてある。
#
user.privileged: root

#
# sockdは典型的な並行サーバであり、親子プロセスに分岐して処理を行う。
# 子プロセスはrootで動作する必要がないため一般権限で動作されるが、上述
# したようにパッケージ導入時に専用アカウントが自動生成されないため、既存
# のnobodyアカウントを利用している。
#
user.unprivileged: nobody


#
# 確立したコネクションがアイドル状態であると見做されるまでのタイムアウト値。
# 本例ではタイムアウト値を設定しない。
#
timeout.io: 0


#
# クライアントからの接続許可を指定。
#
client pass {
  from: 0.0.0.0/0 port 1-65535 to: 0.0.0.0/0
  session.max: 100000         # クライアントから受け付ける最大セッション数。
  session.throttle: 1000/1    # クライアントから受け付ける秒間セッション数。
  log: connect disconnect
}

#
# SOCKS通信の転送許可を指定。
#
socks pass {
  from: 0.0.0.0/0 to: 0.0.0.0/0
  protocol: tcp udp
  log: connect disconnect
}


#
# 例1) 10.1.1.0/24宛(集約拠点A)の通信は直接ターゲットへ転送。
#
route {
  from: 0.0.0.0/0 to: 10.1.1.0/24 via: direct
  command: connect
}

#
# 例2) 172.16.10.0/24宛(外部拠点B)の通信は上位SOCKSサーバへ転送
#
route {
  from: 0.0.0.0/0 to: 172.16.10.0/24 via: 127.0.0.1 port = 11081
  proxyprotocol: socks_v4 socks_v5
  command: connect
}

#
# 例3) 172.16.20.0/24宛(外部拠点C)の通信は上位SOCKSサーバへ転送
#
route {
  from: 0.0.0.0/0 to: 172.16.20.0/24 via: 127.0.0.1 port = 11082
  proxyprotocol: socks_v4 socks_v5
  command: connect
}

#
# 例4) グローバルIP xxx.xxx.xxx.xxx/32宛(外部拠点D)の通信は直接ターゲットへ転送。
#
route {
  from: 0.0.0.0/0 to: xxx.xxx.xxx.xxx/32 via: direct
  command: connect
}
